image: Visual Studio 2017

platform: x64

environment:
 matrix:
  - DC: dmd
    DVersion: beta
    arch: x64
    compiler: msvc2017
  - DC: dmd
    DVersion: stable
    arch: x64
    compiler: msvc2017
  - DC: ldc
    DVersion: beta
    arch: x64
    compiler: msvc2017
  - DC: ldc
    DVersion: stable
    arch: x64
    compiler: msvc2017

skip_tags: false

skip_branch_with_pr: true

install:
  - cmd: git submodule -q update --init
  - ps: function ResolveLatestDMD
        {
            $version = $env:DVersion;
            if($version -eq "stable") {
                $latest = (Invoke-WebRequest "http://downloads.dlang.org/releases/LATEST").toString();
                $url = "http://downloads.dlang.org/releases/2.x/$($latest)/dmd.$($latest).windows.7z";
            }elseif($version -eq "beta") {
                $latest = (Invoke-WebRequest "http://downloads.dlang.org/pre-releases/LATEST").toString();
                $latestVersion = $latest.split("-")[0].split("~")[0];
                $url = "http://downloads.dlang.org/pre-releases/2.x/$($latestVersion)/dmd.$($latest).windows.7z";
            }else {
                $url = "http://downloads.dlang.org/releases/2.x/$($version)/dmd.$($version).windows.7z";
            }
            $env:PATH += ";C:\dmd2\windows\bin;";
            return $url;
        }
  - ps: function ResolveLatestLDC
        {
            $version = $env:DVersion;
            $arch = $env:arch;
            if($version -eq "stable") {
                $latest = (Invoke-WebRequest "https://ldc-developers.github.io/LATEST").toString().replace("`n","").replace("`r","");
                $url = "https://github.com/ldc-developers/ldc/releases/download/v$($latest)/ldc2-$($latest)-windows-$($arch).7z";
            }elseif($version -eq "beta") {
                $latest = (Invoke-WebRequest "https://ldc-developers.github.io/LATEST_BETA").toString().replace("`n","").replace("`r","");
                $url = "https://github.com/ldc-developers/ldc/releases/download/v$($latest)/ldc2-$($latest)-windows-$($arch).7z";
            } else {
                $latest = $version;
                $url = "https://github.com/ldc-developers/ldc/releases/download/v$($version)/ldc2-$($version)-windows-$($arch).7z";
            }
            $env:PATH += ";C:\ldc2-$($latest)-windows-$($arch)\bin";
            $env:DC = "ldc2";
            return $url;
        }
  - ps: function SetUpDCompiler
        {
            $env:toolchain = "msvc";
            if($env:DC -eq "dmd"){
              echo "downloading ...";
              $url = ResolveLatestDMD;
              echo $url;
              Invoke-WebRequest $url -OutFile "c:\dmd.7z";
              echo "finished.";
              pushd c:\\;
              7z x dmd.7z > $null;
              popd;
            }
            elseif($env:DC -eq "ldc"){
              echo "downloading ...";
              $url = ResolveLatestLDC;
              echo $url;
              Invoke-WebRequest $url -OutFile "c:\ldc.zip";
              echo "finished.";
              pushd c:\\;
              7z x ldc.zip > $null;
              popd;
            }
        }
  - ps: SetUpDCompiler
  # Set paths to dependencies (based on architecture)
  - cmd: if %arch%==x86 (set PYTHON_ROOT=C:\python37) else (set PYTHON_ROOT=C:\python37-x64)
  # Print out dependency paths
  - cmd: echo Using Python at %PYTHON_ROOT%
  # Add necessary paths to PATH variable
  - cmd: set PATH=%cd%;%PYTHON_ROOT%;%PYTHON_ROOT%\Scripts;%PATH%
  # Install meson and ninja
  - cmd: pip install ninja meson
  # Set up the build environment
  - cmd: if %compiler%==msvc2015 ( call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" %arch% )
  - cmd: if %compiler%==msvc2017 ( call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat" %arch% )


build_script:
  - ps: if($env:arch -eq "x86"){
            $env:compilersetupargs = "x86";
            $env:Darch = "x86";
            $env:DConf = "m32";
        }elseif($env:arch -eq "x64"){
            $env:compilersetupargs = "amd64";
            $env:Darch = "x86_64";
            $env:DConf = "m64";
        }
  - ps: $env:compilersetup = "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall";
  - '"%compilersetup%" %compilersetupargs%'
  - cmd: meson --backend=ninja builddir -Denable_examples=true -Denable_gl3=true -Ddisable_tests=false -Ddefault_library=static
  - cmd: meson compile -C builddir

test_script:
 - echo %PLATFORM%
 - echo %Darch%
 - echo %DC%
 - echo %PATH%
 - '%DC% --version'
 - echo Dub Tests
 - dub test --arch=%Darch% --compiler=%DC%
 - dub test gfx:core --arch=%Darch% --compiler=%DC%
 - dub test gfx:decl --arch=%Darch% --compiler=%DC%
 - dub test gfx:genmesh --arch=%Darch% --compiler=%DC%
 - dub test gfx:gl3 --arch=%Darch% --compiler=%DC%
 - dub test gfx:math --arch=%Darch% --compiler=%DC%
 - dub test gfx:memalloc --arch=%Darch% --compiler=%DC%
 - dub test gfx:vulkan --arch=%Darch% --compiler=%DC%
 - echo Dub Building Examples
 - dub build gfx:declapi --arch=%Darch% --compiler=%DC%
 - dub build gfx:deferred --arch=%Darch% --compiler=%DC%
 - dub build gfx:depth --arch=%Darch% --compiler=%DC%
 - dub build gfx:shadow --arch=%Darch% --compiler=%DC%
 - dub build gfx:stencil --arch=%Darch% --compiler=%DC%
 - dub build gfx:swapchain --arch=%Darch% --compiler=%DC%
 - dub build gfx:texture --arch=%Darch% --compiler=%DC%
 - dub build gfx:triangle --arch=%Darch% --compiler=%DC%
 - echo Meson Tests
 - meson test -C builddir
